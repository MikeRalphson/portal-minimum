# API Evangelist Portal (Minimum Viable)

# This is mean to be a simple example of a portal for any API.
# It provides a forkable portal, with checklist any API provider can follow.
# It uses Jekyl, and can be controlled mostly via this _config.yml page.

# Kin Lane
# http://apievangelist.com
# @kinlane

# Portal
# Every API should have a simple portal providing access to the API and all supporting resources.

# Name - Provide a simple name for your API / developer portal.
portal_title: 'API Portal'
portal_name: 'Minimum Viable API Portal'

# URL - developer.[yourdomain].com
portal_url: http://portal.minimum.apievangelist.com

# Description - Provide a concise description of what a platform does.
portal_description: This is a forkable, resusable API portal that runs using Jekyll. It is meant to be a single checklist that API providers can use to setup a developer portal, and make sure they are providing the minimum amount of documentation, and other resources that developers are used to.

# Contact Information
portal_contact_name: Kin Lane
portal_contact_email: info@apievangelist.com

#Getting Started - This section gives developers all the informaiton they will need to get started using an API.
getting_started:

  # Turn on the getting started
  on: true

  # A title for the getting started section
  title: Getting Started With The API
  # A description for the getting started section.
  description: Getting started should cover everything developers will need to get up and running with an API. After finishing your API, and you think it is ready for prime time, grab someone who knows nothing about the API, and watch them try to use it. Use what you learn to craft a simple opening paragraph, then some steps users can follow.<br /><br />Here are some some sample steps to get started.
  # An image for the getting started section.
  image: http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-running.png

  # The link to signup for developer access
  signup_label: Signup For API
  signup_url: http://developer.apievangelist.com/signup

  # The link to signup for developer access
  documentation_label: Visit Documentation
  documentation_url: http://developer.apievangelist.com/documentation/

  # The link to login as developer
  login_url: http://developer.apievangelist.com/login

  # The link to create a new application
  create_app_label: Create a New Application & Get Your API Keys
  create_app_url: http://developer.apievangelist.com/user/app/create

  footer: You should close up your getting started steps with some other helpful information. Depending on the other building blocks you offer as part of API operations, you can provide links to other existing resources.<br /><br />Make sure and let your users know that you are there if they need help, and to contact you with questions, or if there is anything that can done to make it easier--always be improving on the getting started process.

# Authentication - Help developers understand authentication. There are a handful of common approaches from BasicAuth, and API keys, to oAuth--provide a simple overview of how authentication is handled.
authentication:

  # Turn on the authentication
  on: true

  # The overal authentication title & description
  title: Authentication
  description: This the authentication page for this template API portal. It should provide as much detail as possible about how to authenticate with an API. Try to keep things as concise as possible, and explain it like you are explaining to someone who knows nothing about your API. Make sure and try to use common approaches to API authentication.
  image: https://s3.amazonaws.com/kinlane-productions/bw-icons/bw-authentication-2.png

  # The title & description if API is open.
  open_title: Open API (Publicly Available)
  open_description: We do not use authentication, with all API paths left open to the public.
  open_url: http://example.com/open/

  # The title & description if API is open.
  basic_title: Basic Authentication
  basic_description: We employ Basic Authentication for making calls to the API, requring user and password sent as headers.
  basic_url: http://en.wikipedia.org/wiki/Basic_access_authentication

  # The title & description if API is open.
  keys_title: API Keys
  keys_description: We employ a public keys and secret key for making calls to the API, sent as headers.
  keys_url: http://en.wikipedia.org/wiki/Application_programming_interface_key

  # The title & description if API is open.
  oauth_title: OAuth
  oauth_description: We use OAuth to secure the API, and manage access to information.
  oauth_url: http://en.wikipedia.org/wiki/OAuth

  # The title & description if API is open.
  json_web_token_title: JSON Web Tokens
  json_web_token_description: We use JSON Web Tokens to secure the API, and manage access to information.
  json_web_token_url: https://jwt.io/

  # The title & description if API is open.
  other_title: Custom Authentication
  other_description: We use a custom or proprietary approach to authentication for all API calls.
  other_url: http://example.com/auth/

  # The footer for the content and page.
  footer: Consider also providing an authentication tester, and if oAuth is used, it can be helpful to allow develoeprs to manually generate access tokens, to simply making test API calls. Remember authentication is one of the biggest areas struggle with when onboarding, so keep it as simple as possible.

# Documentation
documentation:

  title: API Documentation

# Listing of all the APIs
api:

  # The version for the API(s)
  version: 1

  # the domain of the service
  host: api.example.com

  # array of all schemes that your API supports
  schemes:
   - https

  # will be prefixed to all paths
  basePath: /v1

  # media types produced
  produces:
   - text/html
   - application/json
   - application/xml
   - application/hal+json
   - application/vnd.api+json
   - application/vnd.collection+json
   - application/vnd.siren+json

  #paths for the API
  paths:
    /products:
     get:
      operationId: getProducts
      summary: Products
      description: The description of the product.
      parameters:
        - name: query
          in: query
          description: The query of search.
          required: false
          type: string
          format: string
        - name: page
          in: query
          description: The page to show.
          required: false
          type: string
          format: string
      tags:
        - Products
      responses:
        200:
          description: An array of products
          schema:
            type: array
            items:
              $ref: '#/definitions/Product'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    /services:
     get:
      operationId: getServices
      summary: Services
      description: The description of the service.
      parameters:
        - name: query
          in: query
          description: The query of search.
          required: false
          type: string
          format: string
        - name: page
          in: query
          description: The page to show.
          required: false
          type: string
          format: string
      tags:
        - Services
      responses:
        200:
          description: An array of services
          schema:
            type: array
            items:
              $ref: '#/definitions/Service'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  # The definitions for the APIs underlying data model
  definitions:
    Product:
      type: object
      properties:
        product_id:
          type: string
          description: Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles.
        name:
          type: string
          description: Name of product.
        description:
          type: string
          description: Description of product.
    Service:
      type: object
      properties:
        product_id:
          type: string
          description: The unique id for the service.
        name:
          type: string
          description: Name of service.
        description:
          type: string
          description: Description of product.

# Code - Provide consumers with code, whether they are samples, libraries, or full blown Software Development Kits (SDKs) and Platform Development Kits (PDK). Make sure as many possible languages are provided, not just the languages you use.
code:

  # Turn on the code page
  on: true

  # The title and description for the code available for site.
  title: Code
  description: This is the page where we showcase all the code available for integration with the API. We have tried to provide as many possible language libraries as we possibly can.

  # Information about github account for the platform (either user or org)
  github_org: apievangelist
  github_user: kinlane

  # What full SDKs are available
  sdks:
    php_url: http://example.com/php/
    python_url: http://example.com/python/
    javascript_url: http://example.com/javascript/
    java_url: http://example.com/java/
    csharp_url: http://example.com/csharp/
    go_url: http://example.com/go/
    ruby_url: http://example.com/ruby/

  # The closing text for the code page.
  footer: If there are specific languages or code platforms you'd like to see code available for please let us know. Sometimes it will makes sense to add a specific platform we haven't thought of.

# Communication - Setup the proper communication channels like a blog and PR section, as well as a healthy social presence on Twitter, LinkedIn, Facebook, or other places your audience already exists.
communication:

  # Turn on the communications page
  on: true

  # The title for the platform communications page
  title: Platform Communications

  # Am image to show on communications page
  image: https://s3.amazonaws.com/kinlane-productions/bw-icons/bw-support.png

  # A description for the platform communications page
  description: This is the communication center for the API platform. We understand that it is important to communicate with our developer community, and that communications done well can also attract new developes, and interest in our API platform.

  # Where do we blog?
  blog_url: http://example.com/blog/
  blog_rss_url: http://example.com/blog.xml
  blog_atom_url: http://example.com/atom.xml

  twitter_user: apievangelist
  linkedin_user: apievangelist

  github_user: kinlane
  github_org: apievangelist

  footer: Even if an API is a side project, we can make sure and setup as well as monitor a handful of common communication channels. Successful API providers are using blogs, Twitter, and Github to efficiently manage platform communications for their APIs.

# Pricing - Even if an API is free, provide an overview of how the platform makes it money, and generates value — enough to keep it up and running, so I know, as an API consumer I can depend on. Let me know all pricing levels, and provide insight into other partner opportunities.
plans:

  # The title and description for the plan available for site.
  title: API Plans
  description: Provide simple, clear information about what an API costs. Break down pricing into packages, and units of value, and provide several tiers of access, with levels that are easy to climb.<br /><br />Break down the packages, and details, with self-service access.
  image: https://s3.amazonaws.com/kinlane-productions/bw-icons/bw-plan.png

  # What are the plans
  tiers:
    - title: Bronze
      description: The description of the bronze level of API access.
      image: http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-dollar-sign.jpg
      features:
        - Feature One
        - Feature Two
        - Feature Three
      limits:
        - Limit One
        - Limit Two
        - Limit Three
      signup_url: http://signup/url/
    - title: Silver
      description: The description of the silver level of API access.
      image: http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-dollar-sign.jpg
      features:
        - Feature One
        - Feature Two
        - Feature Three
      limits:
        - Limit One
        - Limit Two
        - Limit Three
      signup_url: http://signup/url/
    - title: Gold
      description: The description of the gold level of API access.
      image: http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-dollar-sign.jpg
      features:
        - Feature One
        - Feature Two
        - Feature Three
      limits:
        - Limit One
        - Limit Two
        - Limit Three
      signup_url: http://signup/url/

  footer: Make sure and provide a relief valve for pricing, allowing developers to pay for what they need. Be as transparent as possible about what the upper tiers of aceess look like, and what it takes to get ther.<br /><br />Look at the pricing of other popular APIs, to get an idea of the normal tkype of presenting pricing.

# Direct Support - Give API consumers a way to reach you via email, ticketing system, chat, or good ol fashioned phone.
direct_support:

  # Turn on the direct support
  on: true

  # The title and description for the direct support available for site.
  title: Direct Support
  description: We offer a handful of direct support options so that you can contact us and get your questions answered.
  email: info@example.com
  phone: 555-555-5555
  ticket_label: Add a Ticket
  ticket_url: http://ticket.com/
  chat_label: Chat With Us
  chat_url: http://chat.com/
  footer: If there is a better way in which you'd like to be able to contact us please let us know using one of the channels above.

# Self-Service Support - Provide self service support options via FAQ, Knowledgbases, Forums and other proven ways developers can find the answers they need, when they need.
self_service_support:

  # Turn on the self service support
  on: true

  # The title and description for the self service support available for site.
  title: Self-Service Support
  description: We also provide a handful of self-service support options where you might be able to get your questions answered quicker than direct channels.

  github_issues_label: Submit A Github Issue
  github_issues_url: http://github.com/issues/

  forum_label: Visit Our Forum
  forum_url: http://forum.com

  stack_exchange_label: Get Support Over At Stack Excange
  stack_exchange_url: http://stackexchange.com

  footer: If there is a place we should be offering support that might reach you, and other developers please let us know of where we might connect with you.

# Roadmap - Give consumers a look at what is coming in the future, keeping it as a simple, forecast of the short and long term future of an API.
road_map:

  # Turn on the road map
  on: true

  # The title of the road map
  title: Road Map

  # The description of the road map
  description: This is the road map for this platform, providing as much detail as possible about where we are taking the platform.

  # Am image to show on the road map page
  image: https://s3.amazonaws.com/kinlane-productions/bw-icons/bw-roadmap.png

  # These are the road map entries you want to share.
  entries:
    - title: Road Map Entry Title
      date: 09/01/2016
      details: The details of the entry.
      url: http://github.com/issue/
    - title: Road Map Entry Title
      date: 08/01/2016
      details: The details of the entry.
      url: http://github.com/issue/
    - title: Road Map Entry Title
      date: 07/01/2016
      details: The details of the entry.
      url: http://github.com/issue/

  # Closing up the text for the page.
  footer: We try to share as much information as possible regarding where we are taking the platform, and will update on a regular basis.

# Issues - What are the current issues.
issues:

  # Turn on the issues
  on: true

  # The title of the road map
  title: Issues

  # The description of the road map
  description: These are the current issue for this platform, providing as much detail as possible about anything that is currently impacting things.

  # Am image to show on issues page
  image: https://s3.amazonaws.com/kinlane-productions/bw-icons/bw-issue.png

  status_url: http://example.com/status/

  # These are the road map entries you want to share.
  entries:
    - title: Issues Entry Title
      date: 09/01/2016
      details: The details of the entry.
      url: http://github.com/issue/
    - title: Issues Entry Title
      date: 08/01/2016
      details: The details of the entry.
      url: http://github.com/issue/
    - title: Issues Entry Title
      date: 07/01/2016
      details: The details of the entry.
      url: http://github.com/issue/

  # Closing up the text for the page.
  footer: We will try to post everything here that is currently going on, and share any problems that come up as they occur, and will take them down when resolved.

# Change Log - Provide us consumers with a list of all changes that have been made to platform operations, don’t limit to just API changes, and include significant roadmap milestones that have been reached.
change_log:

  # Turn on the change log
  on: true

  # The title of the road map
  title: Change Log

  # The description of the road map
  description: This is the change log for this platform, providing as much detail as possible about what has changed with the platform.

  # Am image to show on change log page
  image: https://s3.amazonaws.com/kinlane-productions/bw-icons/bw-change.png

  # These are the road map entries you want to share.
  entries:
    - title: Change Log Entry Title
      date: 09/01/2016
      details: The details of the entry.
      url: http://github.com/issue/
    - title: Change Log Entry Title
      date: 08/01/2016
      details: The details of the entry.
      url: http://github.com/issue/
    - title: Change Log Entry Title
      date: 07/01/2016
      details: The details of the entry.
      url: http://github.com/issue/

  # Closing up the text for the page.
  footer: We try to share as much information as possible regarding where what has changed with the platform, and updating on a regular basis.

# Terms of Service - Provide, easy to find, and understand terms of service for platform operations, helping API consumers understand what they are in for.
legal:

  terms_of_service_on: true
  privacy_policy_on: true
