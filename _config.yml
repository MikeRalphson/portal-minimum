# API Evangelist Portal (Minimum Viable)

# This is mean to be a simple example of a portal for any API.
# It provides a forkable portal, with checklist any API provider can follow.
# It uses Jekyl, and can be controlled mostly via this _config.yml page.

# Kin Lane
# http://apievangelist.com
# @kinlane

# Portal
# Every API should have a simple portal providing access to the API and all supporting resources.

# Name - Provide a simple name for your API / developer portal.
portal_name: 'Minimum Viable API Portal'

# URL - developer.[yourdomain].com
portal_url: http://portal.minimum.apievangelist.com

# Description - Provide a concise description of what a platform does.
portal_description: This is a forkable, resusable API portal that runs using Jekyll. It is meant to be a single checklist that API providers can use to setup a developer portal, and make sure they are providing the minimum amount of documentation, and other resources that developers are used to.

#Getting Started - This section gives developers all the informaiton they will need to get started using an API.
getting_started:
  # A title for the getting started section
  title: Getting Started With The API
  # A description for the getting started section.
  description: Getting started should cover everything developers will need to get up and running with an API. After finishing your API, and you think it is ready for prime time, grab someone who knows nothing about the API, and watch them try to use it. Use what you learn to craft a simple opening paragraph, then some steps users can follow.<br /><br />Here are some some sample steps to get started.
  # An image for the getting started section.
  image: http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-running.png

  # The link to signup for developer access
  signup_label: Signup For API
  signup_url: http://developer.apievangelist.com/signup

  # The link to signup for developer access
  documentation_label: Visit Documentation
  documentation_url: http://developer.apievangelist.com/documentation/

  # The link to login as developer
  login_url: http://developer.apievangelist.com/login

  # The link to create a new application
  create_app_label: Create a New Application & Get Your API Keys
  create_app_url: http://developer.apievangelist.com/user/app/create

  footer: You should close up your getting started steps with some other helpful information. Depending on the other building blocks you offer as part of API operations, you can provide links to other existing resources.<br /><br />Make sure and let your users know that you are there if they need help, and to contact you with questions, or if there is anything that can done to make it easier--always be improving on the getting started process.

# Authentication - Help developers understand authentication. There are a handful of common approaches from BasicAuth, and API keys, to oAuth--provide a simple overview of how authentication is handled.
authentication:

  # The overal authentication title & description
  title: Authentication
  description: This the authentication page for this template API portal. It should provide as much detail as possible about how to authenticate with an API. Try to keep things as concise as possible, and explain it like you are explaining to someone who knows nothing about your API. Make sure and try to use common approaches to API authentication.

  # The title & description if API is open.
  open_title: Open API (Publicly Available)
  open_description: We do not use authentication, with all API paths left open to the public.
  open_url: http://example.com/open/

  # The title & description if API is open.
  basic_title: Basic Authentication
  basic_description: We employ Basic Authentication for making calls to the API, requring user and password sent as headers.
  basic_url: http://en.wikipedia.org/wiki/Basic_access_authentication

  # The title & description if API is open.
  keys_title: API Keys
  keys_description: We employ a public keys and secret key for making calls to the API, sent as headers.
  keys_url: http://en.wikipedia.org/wiki/Application_programming_interface_key

  # The title & description if API is open.
  oauth_title: OAuth
  oauth_description: We use OAuth to secure access to the API, and manage access to informaiton.
  oauth_url: http://en.wikipedia.org/wiki/OAuth

  # The title & description if API is open.
  other_title: Custom Authentication
  other_description: We use a custom or proprietary approach to authentication for all API calls.

  # The footer for the content and page.
  footer: Consider also providing an authentication tester, and if oAuth is used, it can be helpful to allow develoeprs to manually generate access tokens, to simply making test API calls. Remember authentication is one of the biggest areas struggle with when onboarding, so keep it as simple as possible.

# Listing of all the APIs
api:

  # The version for the API(s)
  version: 1

  # the domain of the service
  host: api.example.com

  # array of all schemes that your API supports
  schemes:
   - https

  # will be prefixed to all paths
  basePath: /v1

  # media types produced
  produces:
   - text/html
   - application/json
   - application/xml
   - application/hal+json
   - application/vnd.api+json
   - application/vnd.collection+json
   - application/vnd.siren+json

  #paths for the API
  paths:
    /products:
     get:
      summary: Products
      description: The description of the product.
    /services:
     get:
      summary: Services
      description: The description of the service.

# Communication - Setup the proper communication channels like a blog and PR section, as well as a healthy social presence on Twitter, LinkedIn, Facebook, or other places your audience already exists.
communication:

  # The title for the platform communications page
  title: Platform Communications

  # Am image to show on communications page
  image: https://s3.amazonaws.com/kinlane-productions/bw-icons/bw-support.png

  # A description for the platform communications page
  description: This is the communication center for the API platform. We understand that it is important to communicate with our developer community, and that communications done well can also attract new developes, and interest in our API platform.

  # Where do we blog?
  blog_url: http://example.com/blog/
  blog_rss_url: http://example.com/blog.xml
  blog_atom_url: http://example.com/atom.xml

  twitter_user: apievangelist
  linkedin_user: apievangelist

  github_user: kinlane
  github_org: apievangelist

  footer: Even if an API is a side project, we can make sure and setup as well as monitor a handful of common communication channels. Successful API providers are using blogs, Twitter, and Github to efficiently manage platform communications for their APIs.
